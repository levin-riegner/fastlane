# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  
  # Usage Example: fastlane internal_release build_flavor:qa
  desc "Submit a new Build to Testers"
  lane :internal_release do |options|
    # Flutter support
    is_flutter = options.fetch(:is_flutter, false)

    # Build App
    if !is_flutter
      gradle(
        task: 'assemble', 
        build_type: ENV["BUILD_FLAVOR"] + "Release"
      )
    end

    # Distribute Build
    firebase_app_distribution(
      app: ENV["FIREBASE_APP_ID"],
      release_notes: last_git_commit[:message],
      apk_path: is_flutter ? get_flutter_apk_path(ENV["BUILD_FLAVOR"]): nil,
      groups: ENV["DISTRIBUTION_GROUPS"]
    )

  end
  
  # https://docs.fastlane.tools/actions/upload_to_play_store/
  # fastlane supply init --json_key path/json_key.json --package_name production_app_dentifier
  desc "Deploy a new Production Release version to Google Play"
  lane :playstore_release do |options|
    # Flutter support
    is_flutter = options.fetch(:is_flutter, false)

    # Build App
    if !is_flutter
      gradle(
        task: "bundle",
        build_type: ENV["BUILD_FLAVOR"] + "Release"
      )
    end

    # Upload Build
    supply(
      track: "production",
      release_status: "draft",
      skip_upload_aab: false,
      skip_upload_apk: true,
      apk: nil,
      aab: is_flutter ? get_flutter_aab_path(ENV["BUILD_FLAVOR"]): nil,
      package_name: ENV["APP_ID"],
      json_key: options[:json_key],
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      in_app_update_priority: 0
    )
  end
  
  # You can define as many lanes as you want
  
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Builds the Release app in Production flavor"
  lane :build do
    gradle(
      task: 'assemble',
      build_type: 'productionRelease'
    )
  end
  
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  end
  
  after_all do |lane|
    # This block is called, only if the executed lane was successful
    
    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end
  
  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

## Internal Functions
# Returns APK path for the given build flavor
def get_flutter_apk_path build_flavor 
    "../build/app/outputs/apk/" + build_flavor + "/release/app-" + build_flavor + "-release.apk"
end
# Returns AAB path for the given build flavor
def get_flutter_aab_path build_flavor 
    "../build/app/outputs/bundle/" + build_flavor + "Release" + "/app-" + build_flavor + "-release.aab"
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded. 
# Learn more at https://github.com/fastlane/fastlane#metrics
