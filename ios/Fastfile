# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

# CI Keychain Values
ci_keychain_name = "ci_keychain"
ci_keychain_password = "ci_keychain_password"

platform :ios do

  before_all do
    if ENV["USE_SWIFT_PACKAGE_MANAGER"] != "true"
      cocoapods
    end
  end

  # Handles Certificates updating
  private_lane :handle_certificates do |options|
    is_ci = options.fetch(:is_ci, false)
    if options[:is_ci]
      create_ci_keychain()
    end
    match(
        type: "appstore",
        readonly: true,
        keychain_name: is_ci ? ci_keychain_name : nil,
        keychain_password: is_ci ? ci_keychain_password : nil,
        app_identifier: ENV["APP_ID"],
        git_url: ENV["MATCH_GIT_URL"],
        team_id: ENV["DEVELOPER_TEAM_ID"]
      )
  end

  # Creates Keychain for CI Machine
  private_lane :create_ci_keychain do |options|
    # Create Keychain
    create_keychain(
      name: ci_keychain_name,
      password: ci_keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )
  end

  # Creates a build file
  private_lane :build do |options|
    dry_run = options.fetch(:dry_run, false)
    gym(
      scheme: ENV["BUILD_SCHEME"],
      configuration: ENV["BUILD_CONFIGURATION"],
      silent: false,
      clean: true,
      export_method: "app-store",
      xcargs: {
        :PROVISIONING_PROFILE_SPECIFIER => "match AppStore #{ENV["APP_ID"]}"
      },
      export_options: {
        compileBitcode: false, 
        provisioningProfiles: {
          "#{ENV["APP_ID"]}" => "match AppStore #{ENV["APP_ID"]}"
        }
      },
      skip_archive: dry_run
    )
  end

  # Publishes a build to Testflight
  private_lane :publish_to_testflight do |options|
    distributionGroups = ENV["DISTRIBUTION_GROUPS"] != nil ? ENV["DISTRIBUTION_GROUPS"].split(",").map(&:strip) : nil;
    pilot(
      app_identifier: ENV["APP_ID"],
      changelog: last_git_commit[:message],
      distribute_external: true,
      notify_external_testers: true,
      demo_account_required: true,
      groups: distributionGroups,
      skip_waiting_for_build_processing: false, # options[:is_ci],
      team_id: ENV["APPSTORE_TEAM_ID"]
    )
  end

  # Uploads dSYMS to Firebase Crashlytics
  # PARAM: after_uploaded_date
  private_lane :upload_dsyms do |options|
    # Download from Appstore Connect
    download_dsyms(
      team_id: ENV["APPSTORE_TEAM_ID"],
      after_uploaded_date: options[:after_uploaded_date],
      app_identifier: ENV["APP_ID"],
      wait_for_dsym_processing: true,
      wait_timeout: 600,
    )
    # Upload to Crashlytics
    upload_symbols_to_crashlytics(app_id: ENV["FIREBASE_APP_ID"])
    # Delete the local dSYM files
    clean_build_artifacts()
  end

  # Loads the App Store Connect API token
  # fastlane setup_appstore_connect_api --appstore_key appstore_key_base64
  # OR
  # fastlane setup_appstore_connect_api --key_filepath path_to_key_file.p8
  private_lane :setup_appstore_connect_api do |options|
    key_content = options[:appstore_key]
    key_filepath = options[:key_filepath]
    if key_filepath != nil
      app_store_connect_api_key(
        key_id: ENV["APPSTORE_KEY_ID"],
        issuer_id: ENV["APPSTORE_KEY_ISSUER_ID"],
        key_filepath: key_filepath,
        in_house: false,
      )
    else
      app_store_connect_api_key(
        key_id: ENV["APPSTORE_KEY_ID"],
        issuer_id: ENV["APPSTORE_KEY_ISSUER_ID"],
        key_content: key_content,
        is_key_content_base64: true,
        in_house: false,
      )
    end
    
  end


  # PARAM: appstore_key
  desc "Submit a new Build to TestFlight"
  lane :testflight_release do |options|
    is_ci = options.fetch(:is_ci, false)
    dry_run = options.fetch(:dry_run, false)
    setup_appstore_connect_api(appstore_key: options[:appstore_key], key_filepath: options[:key_filepath])
    handle_certificates(is_ci: is_ci)
    build(dry_run: dry_run)
    if !dry_run
      publish_to_testflight(is_ci: is_ci)
    end
  end

  desc "Uploads all dSYMS to Crashlytics"
  lane :refresh_dsyms do |options|
    past90Days = DateTime.now - 90
    setup_appstore_connect_api(appstore_key: options[:appstore_key])
    upload_dsyms(after_uploaded_date: past90Days.iso8601)
  end

end
